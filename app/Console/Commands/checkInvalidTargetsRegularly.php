<?php

namespace App\Console\Commands;

use App\Jobs\FetchHttpDataForHost;
use App\Jobs\GetIpsAndCnameForHost;
use App\Target;
use Illuminate\Console\Command;

class checkInvalidTargetsRegularly extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'cronjob:check-if-targets-valid-now';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Take targets with status 0,40x,50x and check if status changed to 20x or 30x';

    /**
     * @var
     */
    protected $targets;

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $this->targets = Target::where('allow_regular_http_checks', 1)
            ->where(function ($query) {
                $query->httpDataUpdateOlderThan(
                    config('ptm.cronjobs.http_data.regular_monitoring.days_between_checks')
                )->orWhereNull("lastDataUpdate_at");
            })
            ->where(function ($query) {
                $query->whereIn('http_status', [0, 401, 403, 404, 500, 502, 503])
                    ->orWhere(function ($query) {
                        $query->whereNull('http_status')
                            ->whereNotNull("autoFetchedDNSData_at");
                    });
            })
            ->take(100)
            ->get();

        foreach ($this->targets as $target) {

            $this->info("Update: " . $target->subdomain);

            $dns = new GetIpsAndCnameForHost($target);
            $dns->handle();

            if ($target->ip == "" || is_null($target->ip)) {
                $this->warn("Ip still empty");
                continue;
            }

            $http = new FetchHttpDataForHost($target);
            $http->handle();

            if (!in_array($target->http_status, [200, 301, 302, 307])) {
                $this->warn("Target still invalid");
                continue;
            }

            if ($target->is_archived == 1) {
                $this->info("activate...");
                $target->is_archived = 0;

            }

            $target->status = "new";
            $target->save();
        }
    }
}
