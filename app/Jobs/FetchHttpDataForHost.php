<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Jobs;

use App\AdminNotice;
use App\Target;
use App\Task\GetHttpResponseForHttpsOrHttpUrl;
use Carbon\Carbon;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;

/**
 * Class FetchHttpDataForHost
 * @package App\Jobs
 */
class FetchHttpDataForHost implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;
    /**
     * @var int
     */
    public $timeout = 28;
    /**
     * @var int
     */
    public $tries = 1;
    /**
     * @var \App\Target
     */
    protected $target;

    /**
     * Create a new job instance.
     *
     * @return void
     */
    public function __construct(Target $target)
    {
        $this->target = $target;
        $this->target->autoFetchedHttpData_at = Carbon::now();
        $this->target->lastDataUpdate_at = Carbon::now();
        $this->target->save();
    }

    /**
     * Execute the job: Crawl the http version of a given target (specified by its domain/subdomain) and get the
     * http status, header and final redirect url if found.
     *
     * @return void
     */
    public function handle()
    {

        try {
            list($httpUrl, $response) = GetHttpResponseForHttpsOrHttpUrl::start($this->target);

            $this->target->http_status = $response['http_status'];
            $this->target->final_redirect_url = $response['final_redirect_url'] ?? $httpUrl;
            $this->target->http_response_header = $response['http_response_header'];
            $this->target->http_body = $response['http_body'];
            $this->target->save();

        } catch (\Exception $e) {
            AdminNotice::create([
                'type'    => 'warning',
                'context' => 'GetIpsAndCnameForHost',
                'message' => "Exception catched",
                'cmd'     => $this->target->subdomain . " - " . substr($e->getMessage(), 0, 255),
            ]);
        }


    }

}
