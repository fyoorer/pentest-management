<?php
/**
 * Author: Damian Schwyrz <mail@damianschwyrz.de>
 * URL: https://www.damianschwyrz.de
 * Copyright (c) 2018.
 */

namespace App\Jobs;

use App\AdminNotice;
use App\Target;
use App\Task\GetDnsRecord;
use Carbon\Carbon;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;

/**
 * Class GetIpsAndCnameForHost
 * @package App\Jobs
 */
class GetIpsAndCnameForHost implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    /**
     * 5 seconds should be enough to get ip and dns data from a subdomain!
     *
     * @var int
     */
    public $timeout = 8;
    /**
     * @var int
     */
    public $tries = 1;
    /**
     * @var \App\Target
     */
    protected $target;

    /**
     * Create a new job instance.
     *
     * @return void
     */
    public function __construct(Target $target)
    {
        $this->target = $target;
        $this->target->autoFetchedDNSData_at = Carbon::now();
        $this->target->lastDataUpdate_at = Carbon::now();
        $this->target->save();
    }

    /**
     * Execute the job.
     *
     * @return void
     */
    public function handle()
    {


        try {
            $host = parse_url($this->target->subdomain);
            $host = $host['host'] ?? str_replace("/", "", $host['path']);
            $dns = new GetDnsRecord($host);


            $this->target->ip = @$dns->ips()[0];
            $this->target->ip_list = @implode(", ", @$dns->ips());
            $this->target->cname = $dns->cname();

            $this->target->save();
        } catch (\Exception $e) {

            AdminNotice::create([
                'type'    => 'warning',
                'context' => 'GetIpsAndCnameForHost',
                'message' => "Exception catched",
                'cmd'     => $this->target->subdomain . " - " . substr($e->getMessage(),0,255),
            ]);

        }


    }
}
